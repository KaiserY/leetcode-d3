import{s as g}from"./index.082e90b7.js";import{d as u,a as b}from"./matrix.a41e1099.js";import{_ as m,e as x,f as v,g as _,o as f,c as h,b as M,F as S,h as w}from"./app.dd4a8a2f.js";const V=x({setup(y){v(()=>{const s=g(i.value).attr("viewBox",[0,0,400,200]);var o={id:"inputMatrix",data:[[2,6,4,8,10,9,15]],x:60,y:24,cellHeight:24,cellWidth:24,cellFontSize:"8px"},r={id:"leftVLine",name:"left",index:0,upper:!1},a={id:"startVLine",name:"start",index:0,upper:!0},n={id:"endVLine",name:"end",index:0,upper:!0},p={id:"smallestMatrix",data:[],x:60,y:72,cellHeight:24,cellWidth:24,cellFontSize:"8px"},t={id:"largestMatrix",data:[],x:12+24*8,y:72,cellHeight:24,cellWidth:24,cellFontSize:"8px"},e={id:"outputMatrix",data:[],x:60,y:120,cellHeight:24,cellWidth:24,cellFontSize:"8px"},l=0,k=[{left:0,start:6,end:0,smallest:-1,largest:-1,output:0}];d([2,6,4,8,10,9,15],k),setInterval(()=>{var c=k[l];r.index=c.left,a.index=c.start,n.index=c.end,p.data=[[c.smallest]],t.data=[[c.largest]],e.data=[[c.output]],u(s,o),b(s,o,a),b(s,o,n),b(s,o,r),u(s,p),u(s,t),u(s,e),l+=1,l>=k.length&&(l=0)},2e3)});function d(s,o){const r=Math.pow(2,31)-1;if(s.length==1)return 0;for(var a=0,n=s.length-1,p=0,t=-1,e=-1;a<s.length;){if(t=Math.max(t,s[a]),a+1<s.length&&s[a+1]<s[a]&&n>a)for(n=a,o.push({left:a,start:n,end:p,largest:t,smallest:e,output:0});n-1>=0&&n-1<r&&s[n-1]>s[a+1];)n-=1,o.push({left:a,start:n,end:p,largest:t,smallest:e,output:0});a+1<s.length&&(s[a+1]<t||s[a+1]<s[n])&&(p=a+1,o.push({left:a,start:n,end:p,largest:t,smallest:e,output:0})),o.push({left:a,start:n,end:p,largest:t,smallest:e,output:0}),a+=1}e=t,o.push({left:a,start:n,end:p,largest:t,smallest:e,output:0});for(let l=n;l<=p;l++)e>s[l]&&(e=s[l],o.push({left:a,start:n,end:p,largest:t,smallest:e,output:0}));for(;n-1>=0&&n-1<r&&s[n-1]>e;)n-=1,o.push({left:a,start:n,end:p,largest:t,smallest:e,output:0});return n==s.length-1?(o.push({left:a,start:n,end:p,largest:t,smallest:e,output:0}),0):(o.push({left:a,start:n,end:p,largest:t,smallest:e,output:p-n+1}),p-n+1)}const i=_();return(s,o)=>(f(),h("svg",{ref_key:"d3svg",ref:i},null,512))}});var z=m(V,[["__file","P581.vue"]]);const L=w(`<h1 id="_581-shortest-unsorted-continuous-subarray" tabindex="-1"><a class="header-anchor" href="#_581-shortest-unsorted-continuous-subarray" aria-hidden="true">#</a> 581. Shortest Unsorted Continuous Subarray</h1><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: nums = [2,6,4,8,10,9,15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,3),F=w(`<h2 id="rust-solution" tabindex="-1"><a class="header-anchor" href="#rust-solution" aria-hidden="true">#</a> Rust Solution</h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">find_unsorted_subarray</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> nums<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> left<span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> start<span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> end<span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> largest<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100000</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            largest <span class="token operator">=</span> largest<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> start <span class="token operator">&gt;</span> left <span class="token punctuation">{</span>
                start <span class="token operator">=</span> left<span class="token punctuation">;</span>
                <span class="token keyword">while</span> start <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> start <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">usize</span><span class="token punctuation">::</span><span class="token constant">MAX</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> nums<span class="token punctuation">[</span>start <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
                        start <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> largest <span class="token operator">||</span> nums<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                end <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            left <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> smallest <span class="token operator">=</span> largest<span class="token punctuation">;</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> start<span class="token punctuation">..=</span>end <span class="token punctuation">{</span>
            <span class="token keyword">if</span> smallest <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>
                smallest <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> start <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> start <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">usize</span><span class="token punctuation">::</span><span class="token constant">MAX</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>start <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> smallest <span class="token punctuation">{</span>
                start <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> start <span class="token operator">==</span> nums<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">{</span>
            <span class="token number">0i32</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">i32</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div>`,2),H={setup(y){return(d,i)=>(f(),h(S,null,[L,M(z),F],64))}};var E=m(H,[["__file","p581.html.vue"]]);export{E as default};
