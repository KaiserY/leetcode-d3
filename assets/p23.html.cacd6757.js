var v=Object.defineProperty;var w=(u,p,c)=>p in u?v(u,p,{enumerable:!0,configurable:!0,writable:!0,value:c}):u[p]=c;var d=(u,p,c)=>(w(u,typeof p!="symbol"?p+"":p,c),c);import{s as x}from"./index.082e90b7.js";import{d as r}from"./linkedlist.3ad3eb3d.js";import{_ as h,e as y,f as _,g as S,o as f,c as b,b as L,F as N,h as g}from"./app.dd4a8a2f.js";const O=y({setup(u){_(()=>{const n=x(m.value).attr("viewBox",[0,0,400,200]);var a={id:"firstLinkedList",data:[1,4,5],x:10,y:10,cellHeight:24,cellWidth:24,cellFontSize:"8px"},e={id:"secondLinkedList",data:[1,3,4],x:10,y:44,cellHeight:24,cellWidth:24,cellFontSize:"8px"},t={id:"thirdLinkedList",data:[2,6],x:10,y:78,cellHeight:24,cellWidth:24,cellFontSize:"8px"},s={id:"aLinkedList",data:[],x:10,y:122,cellHeight:24,cellWidth:24,cellFontSize:"8px"},l={id:"bLinkedList",data:[],x:10,y:156,cellHeight:24,cellWidth:24,cellFontSize:"8px"},o=0,i=[{a:[],b:[]}];c([new p(1,new p(4,new p(5,null))),new p(1,new p(3,new p(4,null))),new p(2,new p(6,null))],i),setInterval(()=>{s.data=i[o].a,l.data=i[o].b,r(n,a),r(n,e),r(n,t),r(n,s),r(n,l),o+=1,o>=i.length&&(o=0)},2e3)});class p{constructor(a,e){d(this,"val");d(this,"next");this.val=a===void 0?0:a,this.next=e===void 0?null:e}}function c(n,a){if(n.length==0)return null;var e=[];for(let s=0;s<n.length;s++)e.push(n[s]);for(;e.length>1;){var t=k(e.shift(),e.shift(),a);e.push(t)}return e.pop()}function k(n,a,e){if(n==null&&a==null)return null;if(n==null)return a;if(a==null)return n;for(var t=JSON.parse(JSON.stringify(n)),s=JSON.parse(JSON.stringify(a)),l=[],o=[];t!=null;)l.push(t.val),t=t.next;for(;s!=null;)o.push(s.val),s=s.next;if(e.push({a:l,b:o}),n.val<a.val){n.next=k(n.next,a,e);for(var t=JSON.parse(JSON.stringify(n)),s=JSON.parse(JSON.stringify(a)),l=[],o=[];t!=null;)l.push(t.val),t=t.next;for(;s!=null;)o.push(s.val),s=s.next;return e.push({a:l,b:o}),n}else{a.next=k(n,a.next,e);for(var t=JSON.parse(JSON.stringify(n)),s=JSON.parse(JSON.stringify(a)),l=[],o=[];t!=null;)l.push(t.val),t=t.next;for(;s!=null;)o.push(s.val),s=s.next;return e.push({a:l,b:o}),a}}const m=S();return(n,a)=>(f(),b("svg",{ref_key:"d3svg",ref:m},null,512))}});var J=h(O,[["__file","P23.vue"]]);const B=g(`<h1 id="_23-merge-k-sorted-lists" tabindex="-1"><a class="header-anchor" href="#_23-merge-k-sorted-lists" aria-hidden="true">#</a> 23. Merge k Sorted Lists</h1><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,3),F=g(`<h2 id="rust-solution" tabindex="-1"><a class="header-anchor" href="#rust-solution" aria-hidden="true">#</a> Rust Solution</h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">generate_parenthesis</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> res<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> cur<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> cur<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        res
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">dfs</span><span class="token punctuation">(</span>left<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> right<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> cur<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">String</span><span class="token punctuation">,</span> all<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> left <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            all<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> left <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
                cur<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">&#39;(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">dfs</span><span class="token punctuation">(</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> all<span class="token punctuation">)</span><span class="token punctuation">;</span>
                cur<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> right <span class="token operator">&gt;</span> left <span class="token punctuation">{</span>
                cur<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">&#39;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">dfs</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> cur<span class="token punctuation">,</span> all<span class="token punctuation">)</span><span class="token punctuation">;</span>
                cur<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div>`,2),A={setup(u){return(p,c)=>(f(),b(N,null,[B,L(J),F],64))}};var q=h(A,[["__file","p23.html.vue"]]);export{q as default};
