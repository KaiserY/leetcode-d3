import{s as h}from"./index.082e90b7.js";import{d as u,a as f}from"./matrix.a41e1099.js";import{_ as r,e as v,f as _,g as x,o as k,c as d,b as g,F as y,h as m}from"./app.dd4a8a2f.js";const w=v({setup(b){_(()=>{const s=h(o.value).attr("viewBox",[0,0,400,200]);var e={id:"inputMatrix",data:[["(",")","[","]","{","}"]],x:60,y:24,cellHeight:24,cellWidth:24,cellFontSize:"8px"},a={id:"inputMatrixVLine",name:"i",index:0,upper:!0},c={id:"mapMatrix",data:[[")","("],["}","{"],["]","["]],x:240,y:24,cellHeight:24,cellWidth:24,cellFontSize:"8px"},t={id:"stackMatrix",data:[["","","",""]],x:60,y:72,cellHeight:24,cellWidth:24,cellFontSize:"8px"},n=0,p=[{i:0,stack:["","","",""]}];i("()[]{}",p),setInterval(()=>{a.index=p[n].i,t.data=[p[n].stack],u(s,e),f(s,e,a),u(s,c),u(s,t),n+=1,n>=p.length&&(n=0)},2e3)});function i(s,e){var a=[],c=new Map([[")","("],["}","{"],["]","["]]);for(let n=0;n<s.length;n++){if(c.has(s[n])){if(a.pop()!=c.get(s[n])){var t=["","","",""];for(let l=0;l<a.length;l++)t[n]=a[l];return e.push({i:n,stack:t}),!1}}else a.push(s[n]);var t=["","","",""];for(let p=0;p<a.length;p++)t[p]=a[p];e.push({i:n,stack:t})}return a.length==0}const o=x();return(s,e)=>(k(),d("svg",{ref_key:"d3svg",ref:o},null,512))}});var M=r(w,[["__file","P20.vue"]]);const S=m(`<h1 id="_20-valid-parentheses" tabindex="-1"><a class="header-anchor" href="#_20-valid-parentheses" aria-hidden="true">#</a> 20. Valid Parentheses</h1><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: s = &quot;()[]{}&quot;
Output: true
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,3),V=m(`<h2 id="rust-solution" tabindex="-1"><a class="header-anchor" href="#rust-solution" aria-hidden="true">#</a> Rust Solution</h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">is_valid</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> str_map<span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        str_map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token char">&#39;)&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        str_map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token char">&#39;}&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;{&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        str_map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token char">&#39;]&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;[&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> s1 <span class="token keyword">in</span> s<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> str_map<span class="token punctuation">.</span><span class="token function">contains_key</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>str_map<span class="token punctuation">[</span><span class="token operator">&amp;</span>s1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        v<span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div>`,2),F={setup(b){return(i,o)=>(k(),d(y,null,[S,g(M),V],64))}};var B=r(F,[["__file","p20.html.vue"]]);export{B as default};
