import{s as h}from"./index.082e90b7.js";import{d as f}from"./matrix.a41e1099.js";import{_ as i,e as g,f as _,g as v,o as k,c as m,b as y,F as w,h as d}from"./app.dd4a8a2f.js";const x=g({setup(b){_(()=>{const t=h(r.value).attr("viewBox",[0,0,400,200]);var e={id:"outputMatrix",data:[],x:60,y:24,cellHeight:24,cellWidth:24,cellFontSize:"8px"},n=0,s=[{output:[]}];l(3,s),setInterval(()=>{e.data=s[n].output,f(t,e),n+=1,n>=s.length&&(n=0)},2e3)});function l(t,e){var n=[],s=[];return c(t,t,s,n,e),n}function c(t,e,n,s,o){if(t==0&&e==0){s.push(n.join(""));var a=[];for(let u=0;u<s.length;u++)a.push(s[u].split(""));o.push({output:a})}else{if(t>0){n.push("(");var a=[];for(let p=0;p<s.length;p++)a.push(s[p].split(""));a.push(JSON.parse(JSON.stringify(n))),o.push({output:a}),c(t-1,e,n,s,o),n.pop();var a=[];for(let p=0;p<s.length;p++)a.push(s[p].split(""));a.push(JSON.parse(JSON.stringify(n))),o.push({output:a})}if(e>t){n.push(")");var a=[];for(let p=0;p<s.length;p++)a.push(s[p].split(""));a.push(JSON.parse(JSON.stringify(n))),o.push({output:a}),c(t,e-1,n,s,o),n.pop();var a=[];for(let p=0;p<s.length;p++)a.push(s[p].split(""));a.push(JSON.parse(JSON.stringify(n))),o.push({output:a})}}}const r=v();return(t,e)=>(k(),m("svg",{ref_key:"d3svg",ref:r},null,512))}});var S=i(x,[["__file","P22.vue"]]);const q=d(`<h1 id="_22-generate-parentheses" tabindex="-1"><a class="header-anchor" href="#_22-generate-parentheses" aria-hidden="true">#</a> 22. Generate Parentheses</h1><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: n = 3
Output: [&quot;((()))&quot;,&quot;(()())&quot;,&quot;(())()&quot;,&quot;()(())&quot;,&quot;()()()&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,3),O=d(`<h2 id="rust-solution" tabindex="-1"><a class="header-anchor" href="#rust-solution" aria-hidden="true">#</a> Rust Solution</h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">generate_parenthesis</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> res<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> cur<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> cur<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        res
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">dfs</span><span class="token punctuation">(</span>left<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> right<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> cur<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">String</span><span class="token punctuation">,</span> all<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> left <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            all<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> left <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
                cur<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">&#39;(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">dfs</span><span class="token punctuation">(</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> all<span class="token punctuation">)</span><span class="token punctuation">;</span>
                cur<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> right <span class="token operator">&gt;</span> left <span class="token punctuation">{</span>
                cur<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">&#39;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">dfs</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> cur<span class="token punctuation">,</span> all<span class="token punctuation">)</span><span class="token punctuation">;</span>
                cur<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div>`,2),N={setup(b){return(l,c)=>(k(),m(w,null,[q,y(S),O],64))}};var P=i(N,[["__file","p22.html.vue"]]);export{P as default};
