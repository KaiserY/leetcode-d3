import{s as S}from"./index.082e90b7.js";import{d as g,c as M,b as N}from"./matrix.a41e1099.js";import{_ as x,e as O,f as J,g as V,o as v,c as w,b as H,F as P,h as q}from"./app.dd4a8a2f.js";const F=O({setup(_){J(()=>{const t=S(h.value).attr("viewBox",[0,0,400,200]);var m={id:"queriesMatrix",data:[["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]],x:60,y:24,cellHeight:24,cellWidth:24,cellFontSize:"8px"},d={id:"queriesMatrixHLine",name:"i",index:0,left:!0},l={id:"outputMatrix",data:[],x:24*10,y:24,cellHeight:24,cellWidth:24,cellFontSize:"8px"},a={id:"graphMatrix",data:[],x:24*5,y:24,cellHeight:24,cellWidth:24,cellFontSize:"8px"},r={id:"graphMatrixPoint",name:"edge",x:0,y:0},i=0,e=[{i:0,graph:new Map,edge:["",""],output:[]}];y([["a","b"],["b","c"]],[2,3],[["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]],e),setInterval(()=>{var u=e[i],o=Array.from(u.graph.keys()).sort(),p=[];p[0]=[];for(let s=0;s<o.length;s++){p[s+1]=[],p[s+1][0]=o[s],p[0][s+1]=o[s];var k=u.graph.get(o[s]);for(let n=0;n<o.length;n++)if(k==null)p[s+1][n+1]=-1;else if(s==n)p[s+1][n+1]=1;else{var f=k.find(c=>c[0]==o[n]);f==null?p[s+1][n+1]=-1:p[s+1][n+1]=f[1].toPrecision(1)}}d.index=u.i,l.data=[u.output],r.x=o.indexOf(u.edge[1])+1,r.y=o.indexOf(u.edge[0])+1,a.data=p,g(t,m),M(t,m,d),g(t,a),N(t,a,r),g(t,l),i+=1,i>=e.length&&(i=0)},2e3)});function y(t,m,d,l){var a=new Map;for(let n=0;n<t.length;n++){var r=a.get(t[n][0]);r==null&&(r=[],a.set(t[n][0],r)),r.push([t[n][1],m[n]]);var i=a.get(t[n][1]);i==null&&(i=[],a.set(t[n][1],i)),i.push([t[n][0],1/m[n]])}var e=[];l.push({i:0,graph:a,edge:["",""],output:JSON.parse(JSON.stringify(e))});for(let n=0;n<d.length;n++){const c=d[n];if(!a.has(c[0])||!a.has(c[1]))e.push(-1),l.push({i:n,graph:a,edge:[c[0],c[1]],output:JSON.parse(JSON.stringify(e))});else if(c[0]==c[1])e.push(1),l.push({i:n,graph:a,edge:[c[0],c[1]],output:JSON.parse(JSON.stringify(e))});else{var u=new Set;u.add(c[0]);for(var o=-1,p=[[c[0],1]];p.length!=0;){var k=p.pop(),f=a.get(k[0]);for(const b of f){if(!u.has(b[0])&&(u.add(b[0]),p.push([b[0],k[1]*b[1]]),b[0]==c[1])){o=k[1]*b[1],p.splice(0,p.length);var s=JSON.parse(JSON.stringify(e));s.push(o),l.push({i:n,graph:a,edge:[k[0],b[0]],output:s});break}var s=JSON.parse(JSON.stringify(e));s.push(o),l.push({i:n,graph:a,edge:[k[0],b[0]],output:s})}}e.push(o),l.push({i:n,graph:a,edge:["",""],output:JSON.parse(JSON.stringify(e))})}}return e}const h=V();return(t,m)=>(v(),w("svg",{ref_key:"d3svg",ref:h},null,512))}});var D=x(F,[["__file","P399.vue"]]);const z=q(`<h1 id="_399-evaluate-division" tabindex="-1"><a class="header-anchor" href="#_399-evaluate-division" aria-hidden="true">#</a> 399. Evaluate Division</h1><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: equations = [[&quot;a&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;c&quot;]], values = [2.0,3.0], queries = [[&quot;a&quot;,&quot;c&quot;],[&quot;b&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;e&quot;],[&quot;a&quot;,&quot;a&quot;],[&quot;x&quot;,&quot;x&quot;]]
Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]
Explanation:
Given: a / b = 2.0, b / c = 3.0
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?
return: [6.0, 0.5, -1.0, 1.0, -1.0 ]
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,3),B=q(`<h2 id="rust-solution" tabindex="-1"><a class="header-anchor" href="#rust-solution" aria-hidden="true">#</a> Rust Solution</h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">calc_equation</span><span class="token punctuation">(</span>
        equations<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
        values<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">f64</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
        queries<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">f64</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> n <span class="token operator">=</span> equations<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> graph <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>n <span class="token punctuation">{</span>
            <span class="token keyword">let</span> eq <span class="token operator">=</span> <span class="token operator">&amp;</span>equations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> val <span class="token operator">=</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            graph
                <span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>eq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">or_insert</span><span class="token punctuation">(</span><span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>eq<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            graph
                <span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>eq<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">or_insert</span><span class="token punctuation">(</span><span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>eq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1_f64</span> <span class="token operator">/</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">let</span> <span class="token keyword">mut</span> answer <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> query <span class="token keyword">in</span> queries <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token operator">!</span>graph<span class="token punctuation">.</span><span class="token function">contains_key</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>graph<span class="token punctuation">.</span><span class="token function">contains_key</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                answer<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1_f64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> query<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> query<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
                answer<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1_f64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> <span class="token keyword">mut</span> pasts <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashSet</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                pasts<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>query<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">let</span> <span class="token keyword">mut</span> val <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1_f64</span><span class="token punctuation">;</span>
                <span class="token keyword">let</span> <span class="token keyword">mut</span> stack <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">(</span>query<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1_f64</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">let</span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">let</span> next_nodes <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>node<span class="token number">.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">for</span> next_node <span class="token keyword">in</span> next_nodes <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> pasts<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>next_node<span class="token number">.0</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>next_node<span class="token number">.0</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token number">.1</span> <span class="token operator">*</span> next_node<span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">if</span> next_node<span class="token number">.0</span> <span class="token operator">==</span> query<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
                                val <span class="token operator">=</span> node<span class="token number">.1</span> <span class="token operator">*</span> next_node<span class="token number">.1</span><span class="token punctuation">;</span>
                                stack<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token keyword">break</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                answer<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        answer
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div>`,2),E={setup(_){return(y,h)=>(v(),w(P,null,[z,H(D),B],64))}};var j=x(E,[["__file","p399.html.vue"]]);export{j as default};
