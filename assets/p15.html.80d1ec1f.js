import{s as z}from"./index.082e90b7.js";import{d as r,a as c}from"./matrix.a41e1099.js";import{_ as v,e as F,f as B,g as I,o as y,c as _,b as j,F as D,h as V}from"./app.dd4a8a2f.js";const E=F({setup(M){B(()=>{const n=z(x.value).attr("viewBox",[0,0,400,200]);var s={id:"inputMatrix",data:[[-4,-6,2,2,0,1,3,-2]],x:60,y:24,cellHeight:24,cellWidth:24,cellFontSize:"8px"},p={id:"startMatrixVLine",name:"i",index:0,upper:!0},l={id:"leftMatrixVLine",name:"j",index:1,upper:!0},u={id:"rightMatrixVLine",name:"k",index:s.data[0].length-1,upper:!0},i={id:"outputMatrix",data:[["","",""],["","",""],["","",""]],x:60,y:72,cellHeight:24,cellWidth:24,cellFontSize:"8px"};r(n,s),c(n,s,p),c(n,s,l),c(n,s,u),r(n,i);var a=[-4,-6,2,2,0,1,3,-2],k=[["","",""],["","",""],["","",""]],t=0,e=1,o=a.length-1,d=0,h=!0,m=0,g=!1,w=!1;setInterval(()=>{if(g=!1,w){w=!1,m=0,a=[-4,-6,2,2,0,1,3,-2],k=[["","",""],["","",""],["","",""]],d=0,t=0,e=1,o=a.length-1,s.data=[a],p.index=t,l.index=e,u.index=o,i.data=k,g||(r(n,s),c(n,s,p),c(n,s,l),c(n,s,u),r(n,i),g=!0);return}if(m==0){a.sort((S,L)=>S-L),s.data=[a],r(n,s),c(n,s,p),c(n,s,l),c(n,s,u),r(n,i),m+=1;return}if(h){if(t>0&&a[t-1]==a[t]){t+=1,p.index=t,l.index=e,u.index=o,r(n,s),c(n,s,p),c(n,s,l),c(n,s,u),r(n,i),m+=1;return}e=t+1,o=a.length-1}if(e<o){a[e]+a[o]==-a[t]?(e=b(a,e),o=f(a,o,t)):a[e]+a[o]>-a[t]?o=f(a,o,t):e=b(a,e),a[e]+a[o]==-a[t]&&e!=o&&e!=t&&t!=o&&e<o&&(k[d][0]=a[t],k[d][1]=a[e],k[d][2]=a[o],d+=1),p.index=t,l.index=e,u.index=o,i.data=k,r(n,s),c(n,s,p),c(n,s,l),c(n,s,u),r(n,i),m+=1,h=!1;return}h=!0,p.index=t,l.index=e,u.index=o,r(n,s),c(n,s,p),c(n,s,l),c(n,s,u),r(n,i),t+=1,t>=a.length&&(w=!0),m+=1},2e3)});function b(n,s){for(var p=s+1;p<n.length&&n[p]==n[p-1];)p+=1;return p}function f(n,s,p){for(var l=s-1;l>p&&n[l]==n[l+1];)l-=1;return l}const x=I();return(n,s)=>(y(),_("svg",{ref_key:"d3svg",ref:x},null,512))}});var H=v(E,[["__file","P15.vue"]]);const N=V(`<h1 id="_15-3sum" tabindex="-1"><a class="header-anchor" href="#_15-3sum" aria-hidden="true">#</a> 15. 3Sum</h1><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: nums = [-4, -6, 2, 2, 0, 1, 3, -2]
Output: [[-4,1,3],[-4,2,2],[-2,0,2]]
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,3),P=V(`<h2 id="rust-solution" tabindex="-1"><a class="header-anchor" href="#rust-solution" aria-hidden="true">#</a> Rust Solution</h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">three_sum</span><span class="token punctuation">(</span>values<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> sorted <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sorted<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> ret <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>start<span class="token punctuation">,</span> elem<span class="token punctuation">)</span> <span class="token keyword">in</span> sorted<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> start <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> sorted<span class="token punctuation">[</span>start <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">*</span>elem <span class="token punctuation">{</span>
                <span class="token comment">// if this element is the same as the previous one, we don&#39;t do</span>
                <span class="token comment">// anything, this is to avoid outputting duplicates</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> left <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> right <span class="token operator">=</span> sorted<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token punctuation">{</span>
                <span class="token keyword">if</span> sorted<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> sorted<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span>elem <span class="token punctuation">{</span>
                    ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token operator">*</span>elem<span class="token punctuation">,</span> sorted<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> sorted<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    left <span class="token operator">=</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">align_left</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sorted<span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    right <span class="token operator">=</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">align_right</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sorted<span class="token punctuation">,</span> right<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> sorted<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> sorted<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token operator">-</span>elem <span class="token punctuation">{</span>
                    right <span class="token operator">=</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">align_right</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sorted<span class="token punctuation">,</span> right<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    left <span class="token operator">=</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">align_left</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sorted<span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        ret
    <span class="token punctuation">}</span>

    <span class="token attribute attr-name">#[inline(always)]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">align_left</span><span class="token punctuation">(</span>values<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> left<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">usize</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> ret <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> ret <span class="token operator">&lt;</span> values<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> values<span class="token punctuation">[</span>ret<span class="token punctuation">]</span> <span class="token operator">==</span> values<span class="token punctuation">[</span>ret <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
            <span class="token comment">// to avoid outputting duplicates we keep incrementing our index</span>
            <span class="token comment">// if we encounter the same element</span>
            ret <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ret
    <span class="token punctuation">}</span>

    <span class="token attribute attr-name">#[inline(always)]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">align_right</span><span class="token punctuation">(</span>values<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> right<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> start<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">usize</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> ret <span class="token operator">=</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> ret <span class="token operator">&gt;</span> start <span class="token operator">&amp;&amp;</span> values<span class="token punctuation">[</span>ret<span class="token punctuation">]</span> <span class="token operator">==</span> values<span class="token punctuation">[</span>ret <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
            <span class="token comment">// to avoid outputting duplicates we keep decrementing our index</span>
            <span class="token comment">// if we encounter the same element</span>
            ret <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ret
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div>`,2),R={setup(M){return(b,f)=>(y(),_(D,null,[N,j(H),P],64))}};var $=v(R,[["__file","p15.html.vue"]]);export{$ as default};
