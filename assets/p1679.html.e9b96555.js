import{s as y}from"./index.082e90b7.js";import{d as k,c as _}from"./matrix.a41e1099.js";import{_ as b,e as g,f as w,g as M,o as h,c as f,b as H,F as S,h as x}from"./app.dd4a8a2f.js";const F=g({setup(v){w(()=>{const a=y(i.value).attr("viewBox",[0,0,400,200]);var r={id:"inputMatrix",data:[[1,2,3,4]],x:60,y:24,cellHeight:24,cellWidth:24,cellFontSize:"8px"},o={id:"countMatrix",data:[],x:24*9,y:24,cellHeight:24,cellWidth:24,cellFontSize:"8px"},n={id:"keyMatrixHLine",name:"i",index:-1,left:!0},u={id:"outputMatrix",data:[],x:24*12,y:24,cellHeight:24,cellWidth:24,cellFontSize:"8px"},t=0,s=[{key:-1,count:new Map,res:0}];d([1,2,3,4],5,s),setInterval(()=>{var e=s[t],c=Array.from(e.count),l=[],m=-1;for(let p=0;p<c.length;p++)l[p]=[],l[p][0]=c[p][0],l[p][1]=c[p][1],c[p][0]==e.key&&(m=p);o.data=l,n.index=m,u.data=[[e.res]],k(a,r),k(a,o),_(a,o,n),k(a,u),t+=1,t>=s.length&&(t=0)},2e3)});function d(a,r,o){var n=new Map;for(let s=0;s<a.length;s++){var u=n.get(a[s]);u==null?n.set(a[s],1):n.set(a[s],u+1)}var t=0;return o.push({key:-1,count:n,res:t}),n.forEach((s,e)=>{var c=n.get(e)==null?0:s,l=n.get(r-e)==null?0:n.get(r-e);t+=Math.min(c,l),o.push({key:e,count:n,res:t})}),o.push({key:-1,count:n,res:t/2}),t/2}const i=M();return(a,r)=>(h(),f("svg",{ref_key:"d3svg",ref:i},null,512))}});var z=b(F,[["__file","P1679.vue"]]);const E=x(`<h1 id="_1679-max-number-of-k-sum-pairs" tabindex="-1"><a class="header-anchor" href="#_1679-max-number-of-k-sum-pairs" aria-hidden="true">#</a> 1679. Max Number of K-Sum Pairs</h1><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: nums = [1,2,3,4], k = 5
Output: 2
Explanation: Starting with nums = [1,2,3,4]:
- Remove numbers 1 and 4, then nums = [2,3]
- Remove numbers 2 and 3, then nums = []
There are no more pairs that sum up to 5, hence a total of 2 operations.
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,3),I=x(`<h2 id="rust-solution" tabindex="-1"><a class="header-anchor" href="#rust-solution" aria-hidden="true">#</a> Rust Solution</h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">max_operations</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> count<span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">usize</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> x <span class="token keyword">in</span> nums <span class="token punctuation">{</span>
            <span class="token operator">*</span>count<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or_default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token operator">&amp;</span>key <span class="token keyword">in</span> count<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> a <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> b <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>k <span class="token operator">-</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            res <span class="token operator">+=</span> a<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">(</span>res <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">i32</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>`,2),B={setup(v){return(d,i)=>(h(),f(S,null,[E,H(z),I],64))}};var P=b(B,[["__file","p1679.html.vue"]]);export{P as default};
