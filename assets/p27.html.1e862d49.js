import{s as b}from"./index.082e90b7.js";import{d as c,a as h}from"./matrix.a41e1099.js";import{_ as i,e as x,f as v,g as _,o as u,c as k,b as f,F as y,h as d}from"./app.dd4a8a2f.js";const g=x({setup(m){v(()=>{const s=b(l.value).attr("viewBox",[0,0,400,200]);var e={id:"inputD3Matrix",data:[[0,1,2,2,3,0,4,2]],x:24,y:24,cellHeight:24,cellWidth:24,cellFontSize:"8px"},o={id:"inputMatrixVLine",name:"i",index:0,upper:!0},a={id:"numsMatrix",data:[],x:24,y:72,cellHeight:24,cellWidth:24,cellFontSize:"8px"},t={id:"outputMatrix",data:[],x:24,y:120,cellHeight:24,cellWidth:24,cellFontSize:"8px"},n=0,p=[{i:0,nums:[],output:0}];r([0,1,2,2,3,0,4,2],2,p),setInterval(()=>{o.index=p[n].i,a.data=[p[n].nums],t.data=[[p[n].output]],c(s,e),h(s,e,o),c(s,a),c(s,t),n+=1,n>=p.length&&(n=0)},2e3)});function r(s,e,o){var a=0,t=[];for(let n=0;n<s.length;n++)s[n]!=e&&(s[a]=s[n],a+=1,t.push(s[n])),o.push({i:n,nums:JSON.parse(JSON.stringify(t)),output:a});return a}const l=_();return(s,e)=>(u(),k("svg",{ref_key:"d3svg",ref:l},null,512))}});var w=i(g,[["__file","P27.vue"]]);const M=d(`<h1 id="_27-remove-element" tabindex="-1"><a class="header-anchor" href="#_27-remove-element" aria-hidden="true">#</a> 27. Remove Element</h1><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: nums = [0,1,2,2,3,0,4,2], val = 2
Output: 5, nums = [0,1,4,0,3,_,_,_]
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,3),z=d(`<h2 id="rust-solution" tabindex="-1"><a class="header-anchor" href="#rust-solution" aria-hidden="true">#</a> Rust Solution</h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">remove_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> n<span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> size<span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>n <span class="token punctuation">{</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> val <span class="token punctuation">{</span>
                nums<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                size <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        size <span class="token keyword">as</span> <span class="token keyword">i32</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>`,2),S={setup(m){return(r,l)=>(u(),k(y,null,[M,f(w),z],64))}};var D=i(S,[["__file","p27.html.vue"]]);export{D as default};
