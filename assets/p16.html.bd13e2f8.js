import{s as F}from"./index.082e90b7.js";import{d as e,a}from"./matrix.a41e1099.js";import{_ as w,e as S,f as B,g as j,o as y,c as v,b as z,F as C,h as _}from"./app.dd4a8a2f.js";const D=S({setup(M){B(()=>{const n=F(b.value).attr("viewBox",[0,0,400,200]);var s={id:"inputMatrix",data:[[-4,-6,2,2,0,1,3,-2]],x:60,y:24,cellHeight:24,cellWidth:24,cellFontSize:"8px"},p={id:"startMatrixVLine",name:"i",index:0,upper:!0},o={id:"leftMatrixVLine",name:"j",index:1,upper:!0},c={id:"rightMatrixVLine",name:"k",index:s.data[0].length-1,upper:!0},i={id:"outputMatrix",data:[["","",""],["","",""],["","",""]],x:60,y:72,cellHeight:24,cellWidth:24,cellFontSize:"8px"};e(n,s),a(n,s,p),a(n,s,o),a(n,s,c),e(n,i);var t=[-4,-6,2,2,0,1,3,-2],k=[["","",""],["","",""],["","",""]],f=2,l=0,r=1,u=t.length-1,x=!0,d=0,h=!1,m=!1;setInterval(()=>{if(h=!1,m){m=!1,d=0,t=[-4,-6,2,2,0,1,3,-2],k=[["","",""],["","",""],["","",""]],l=0,r=1,u=t.length-1,s.data=[t],p.index=l,o.index=r,c.index=u,i.data=k,h||(e(n,s),a(n,s,p),a(n,s,o),a(n,s,c),e(n,i),h=!0);return}if(d==0){t.sort((V,L)=>V-L),s.data=[t],e(n,s),a(n,s,p),a(n,s,o),a(n,s,c),e(n,i),d+=1;return}if(x&&(r=l+1,u=t.length-1),r<u){var g=t[r]+t[u]+t[l];if(g==f){k[0][0]=t[l],k[0][1]=t[r],k[0][2]=t[u],p.index=l,o.index=r,c.index=u,i.data=k,e(n,s),a(n,s,p),a(n,s,o),a(n,s,c),e(n,i),m=!0;return}else g>f?u-=1:g<f&&(r+=1);p.index=l,o.index=r,c.index=u,i.data=k,e(n,s),a(n,s,p),a(n,s,o),a(n,s,c),e(n,i),d+=1,x=!1;return}x=!0,p.index=l,o.index=r,c.index=u,e(n,s),a(n,s,p),a(n,s,o),a(n,s,c),e(n,i),l+=1,l>=t.length-1&&(m=!0,k[0][0]=t[l],k[0][1]=t[r],k[0][2]=t[u],p.index=l,o.index=r,c.index=u,i.data=k,e(n,s),a(n,s,p),a(n,s,o),a(n,s,c),e(n,i)),d+=1},2e3)});const b=j();return(n,s)=>(y(),v("svg",{ref_key:"d3svg",ref:b},null,512))}});var E=w(D,[["__file","P16.vue"]]);const H=_(`<h1 id="_16-3sum-closest" tabindex="-1"><a class="header-anchor" href="#_16-3sum-closest" aria-hidden="true">#</a> 16. 3Sum Closest</h1><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: nums = [-4, -6, 2, 2, 0, 1, 3, -2], target = 2
Output: 2
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,3),I=_(`<h2 id="rust-solution" tabindex="-1"><a class="header-anchor" href="#rust-solution" aria-hidden="true">#</a> Rust Solution</h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">three_sum_closest</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> nums <span class="token operator">=</span> nums<span class="token punctuation">;</span>
        nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> res<span class="token punctuation">:</span> <span class="token keyword">i64</span> <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">i32</span><span class="token punctuation">::</span><span class="token constant">MAX</span> <span class="token keyword">as</span> <span class="token keyword">i64</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> target<span class="token punctuation">:</span> <span class="token keyword">i64</span> <span class="token operator">=</span> target <span class="token keyword">as</span> <span class="token keyword">i64</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>nums<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> left <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

            <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token punctuation">{</span>
                <span class="token keyword">let</span> sum<span class="token punctuation">:</span> <span class="token keyword">i64</span> <span class="token operator">=</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> sum <span class="token operator">==</span> target <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> target <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> sum <span class="token operator">&gt;</span> target <span class="token punctuation">{</span>
                    right <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> sum <span class="token operator">&lt;</span> target <span class="token punctuation">{</span>
                    left <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">-</span> sum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>target <span class="token operator">-</span> res<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    res <span class="token operator">=</span> sum<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        res <span class="token keyword">as</span> <span class="token keyword">i32</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div>`,2),N={setup(M){return(b,n)=>(y(),v(C,null,[H,z(E),I],64))}};var O=w(N,[["__file","p16.html.vue"]]);export{O as default};
