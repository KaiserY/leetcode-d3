var N=Object.defineProperty;var q=(r,s,p)=>s in r?N(r,s,{enumerable:!0,configurable:!0,writable:!0,value:p}):r[s]=p;var w=(r,s,p)=>(q(r,typeof s!="symbol"?s+"":s,p),p);import{s as O}from"./index.082e90b7.js";import{d as y}from"./linkedlist.3ad3eb3d.js";import{d as L}from"./matrix.a41e1099.js";import{_ as g,e as B,f as J,g as F,o as x,c as _,b as z,F as D,h as S}from"./app.dd4a8a2f.js";const M=B({setup(r){J(()=>{const i=O(f.value).attr("viewBox",[0,0,400,200]);var e={id:"inputLinkedList",data:[1,2,3,4,5],x:24,y:24,cellHeight:24,cellWidth:24,cellFontSize:"8px"},a={id:"queueMatrix",data:[],x:24,y:72,cellHeight:24,cellWidth:24,cellFontSize:"8px"},l={id:"outputLinkedList",data:[],x:24,y:120,cellHeight:24,cellWidth:24,cellFontSize:"8px"},c=0,n=[{queue:[],output:[]}];p(new s(1,new s(2,new s(3,new s(4,new s(5,null))))),2,n),setInterval(()=>{a.data=[n[c].queue],l.data=n[c].output,y(i,e),L(i,a),y(i,l),c+=1,c>=n.length&&(c=0)},2e3)});class s{constructor(e,a){w(this,"val");w(this,"next");this.val=e===void 0?0:e,this.next=a===void 0?null:a}}function p(i,e,a){for(var l=i,c=0,n=[];l!=null;){var k=l;if(n.push(k),l=l.next,c+=1,c==e)break}var u=[];for(let b=0;b<n.length;b++)u.push(n[b].val);var d=JSON.parse(JSON.stringify(a[a.length-1].output));if(a.push({queue:u,output:d}),n.length==e){for(var t=p(l,e,a),m=n.shift();m!=null;){var k=m;k.next=t,t=k,m=n.shift()}var u=[];for(let h=0;h<n.length;h++)u.push(n[h].val);for(var d=[],o=JSON.parse(JSON.stringify(t));o!=null;)d.push(o.val),o=o.next;return a.push({queue:u,output:d}),t}else{for(var t=null,m=n.pop();m!=null;){var k=m;k.next=t,t=k,m=n.shift()}var u=[];for(let v=0;v<n.length;v++)u.push(n[v].val);for(var d=[],o=JSON.parse(JSON.stringify(t));o!=null;)d.push(o.val),o=o.next;return a.push({queue:u,output:d}),t}}const f=F();return(i,e)=>(x(),_("svg",{ref_key:"d3svg",ref:f},null,512))}});var V=g(M,[["__file","P25.vue"]]);const H=S(`<h1 id="_25-reverse-nodes-in-k-group" tabindex="-1"><a class="header-anchor" href="#_25-reverse-nodes-in-k-group" aria-hidden="true">#</a> 25. Reverse Nodes in k-Group</h1><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,3),I=S(`<h2 id="rust-solution" tabindex="-1"><a class="header-anchor" href="#rust-solution" aria-hidden="true">#</a> Rust Solution</h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">reverse_k_group</span><span class="token punctuation">(</span>head<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">ListNode</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">ListNode</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> queue<span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">VecDeque</span><span class="token operator">&lt;</span><span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">ListNode</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">=</span>
            <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">VecDeque</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> k <span class="token operator">=</span> k <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token keyword">mut</span> node<span class="token punctuation">)</span> <span class="token operator">=</span> p <span class="token punctuation">{</span>
            p <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            queue<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token class-name">Some</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> count <span class="token operator">==</span> k <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> queue<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> k <span class="token punctuation">{</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> prev<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">ListNode</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">reverse_k_group</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> k <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span> <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token keyword">mut</span> node<span class="token punctuation">)</span> <span class="token operator">=</span> link <span class="token punctuation">{</span>
                    node<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>
                    prev <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            prev
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> prev<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">ListNode</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token class-name">None</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span> <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token keyword">mut</span> node<span class="token punctuation">)</span> <span class="token operator">=</span> link <span class="token punctuation">{</span>
                    node<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>
                    prev <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            prev
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div>`,2),Q={setup(r){return(s,p)=>(x(),_(D,null,[H,z(V),I],64))}};var j=g(Q,[["__file","p25.html.vue"]]);export{j as default};
