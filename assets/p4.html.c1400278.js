import{s as x}from"./index.082e90b7.js";import{d as l,a as t}from"./matrix.a41e1099.js";import{_ as k,e as _,f as w,g as y,o as d,c as m,b as h,F as g,h as b}from"./app.dd4a8a2f.js";const v=_({setup(f){w(()=>{const n=x(u.value).attr("viewBox",[0,0,400,200]);var o={id:"nums1Matrix",data:[["23","69","180","400","500","600"]],x:48,y:24,cellHeight:24,cellWidth:24,cellFontSize:"8px"},s={id:"nums1MatrixVLine",name:"i",index:0,upper:!0},r={id:"nums2Matrix",data:[["2","14","36","57","99"]],x:240,y:24,cellHeight:24,cellWidth:24,cellFontSize:"8px"},a={id:"nums2MatrixVLine",name:"j",index:0,upper:!0},c={id:"mergeMatrix",data:[["0","2","14","23","36","57","69","99","180","400","500","600"]],x:48,y:72,cellHeight:24,cellWidth:24,cellFontSize:"8px"},p={id:"curMatrixVLine",name:"cur",index:0,upper:!0},e={id:"lastMatrixVLine",name:"last",index:0,upper:!1};l(n,o),t(n,o,s),l(n,r),t(n,r,a),l(n,c),t(n,c,p),t(n,c,e);var i=0;setInterval(()=>{switch(i){case 0:s.index=0,a.index=0,p.index=0,e.index=0;break;case 1:s.index=0,a.index=1,p.index=1,e.index=0;break;case 2:s.index=0,a.index=2,p.index=2,e.index=1;break;case 3:s.index=1,a.index=2,p.index=3,e.index=2;break;case 4:s.index=1,a.index=3,p.index=4,e.index=3;break;case 5:s.index=1,a.index=4,p.index=5,e.index=4;break;case 6:s.index=2,a.index=4,p.index=6,e.index=5;break}l(n,o),t(n,o,s),l(n,r),t(n,r,a),t(n,c,p),t(n,c,e),i>6?i=0:i+=1},2e3)});const u=y();return(n,o)=>(d(),m("svg",{ref_key:"d3svg",ref:u},null,512))}});var M=k(v,[["__file","P4.vue"]]);const V=b(`<h1 id="_4-median-of-two-sorted-arrays" tabindex="-1"><a class="header-anchor" href="#_4-median-of-two-sorted-arrays" aria-hidden="true">#</a> 4. Median of Two Sorted Arrays</h1><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: nums1 = [23, 69, 180, 400, 500, 600], nums2 = [2, 14, 36, 57, 99]
Output: 69.0
Explanation: merged array = [2,14,23,36,57,69,99,180,400,500,600] and median is 69.
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,3),L=b(`<h2 id="rust-solution" tabindex="-1"><a class="header-anchor" href="#rust-solution" aria-hidden="true">#</a> Rust Solution</h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">find_median_sorted_arrays</span><span class="token punctuation">(</span>nums1<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">f64</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> first <span class="token operator">=</span> <span class="token operator">&amp;</span>nums1<span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> second <span class="token operator">=</span> <span class="token operator">&amp;</span>nums2<span class="token punctuation">;</span>

        <span class="token keyword">if</span> first<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> second<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            first <span class="token operator">=</span> <span class="token operator">&amp;</span>nums2<span class="token punctuation">;</span>
            second <span class="token operator">=</span> <span class="token operator">&amp;</span>nums1
        <span class="token punctuation">}</span>

        <span class="token keyword">let</span> m <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> n <span class="token operator">=</span> second<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> high <span class="token operator">=</span> m<span class="token punctuation">;</span>
        <span class="token keyword">let</span> half_len <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> m<span class="token punctuation">;</span>

        <span class="token keyword">while</span> low <span class="token operator">&lt;=</span> high <span class="token punctuation">{</span>
            <span class="token keyword">let</span> mid_first <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> low<span class="token punctuation">;</span>
            <span class="token keyword">let</span> mid_second <span class="token operator">=</span> half_len <span class="token operator">-</span> mid_first<span class="token punctuation">;</span>

            <span class="token keyword">let</span> first_left <span class="token operator">=</span> <span class="token keyword">if</span> mid_first <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
                <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">i32</span><span class="token punctuation">::</span><span class="token constant">MIN</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                first<span class="token punctuation">[</span>mid_first <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> first_right <span class="token operator">=</span> <span class="token keyword">if</span> mid_first <span class="token operator">==</span> m <span class="token punctuation">{</span>
                <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">i32</span><span class="token punctuation">::</span><span class="token constant">MAX</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                first<span class="token punctuation">[</span>mid_first<span class="token punctuation">]</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> second_left <span class="token operator">=</span> <span class="token keyword">if</span> mid_second <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
                <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">i32</span><span class="token punctuation">::</span><span class="token constant">MIN</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                second<span class="token punctuation">[</span>mid_second <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> second_right <span class="token operator">=</span> <span class="token keyword">if</span> mid_second <span class="token operator">==</span> n <span class="token punctuation">{</span>
                <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">i32</span><span class="token punctuation">::</span><span class="token constant">MAX</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                second<span class="token punctuation">[</span>mid_second<span class="token punctuation">]</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> first_left <span class="token operator">&lt;=</span> second_right <span class="token operator">&amp;&amp;</span> second_left <span class="token operator">&lt;=</span> first_right <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> m<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
                    <span class="token keyword">let</span> <span class="token keyword">mut</span> left_max <span class="token operator">=</span> first_left<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>second_left<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">let</span> <span class="token keyword">mut</span> right_min <span class="token operator">=</span> first_right<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>second_right<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> left_max <span class="token operator">&gt;</span> right_min <span class="token punctuation">{</span>
                        <span class="token keyword">let</span> tmp <span class="token operator">=</span> left_max<span class="token punctuation">;</span>
                        left_max <span class="token operator">=</span> right_min<span class="token punctuation">;</span>
                        right_min <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">return</span> <span class="token punctuation">(</span>right_min <span class="token operator">-</span> left_max<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">f64</span> <span class="token operator">/</span> <span class="token number">2.0</span> <span class="token operator">+</span> <span class="token punctuation">(</span>left_max <span class="token keyword">as</span> <span class="token keyword">f64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> first_left<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>second_left<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">f64</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> first_left <span class="token operator">&gt;</span> second_right <span class="token punctuation">{</span>
                high <span class="token operator">=</span> mid_first <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                low <span class="token operator">=</span> mid_first <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token number">0.0</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br></div></div>`,2),S={setup(f){return(u,n)=>(d(),m(g,null,[V,h(M),L],64))}};var z=k(S,[["__file","p4.html.vue"]]);export{z as default};
